#!/usr/bin/env python

# Copyright 2019 John-Robert Scholz
#
# This file is part of Seisglitch.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# -*- coding: utf-8 -*-


"""
..
"""


#####  python modules import  #####
import os
import sys
import argparse
import numpy as np
import matplotlib.pyplot as plt


#####  obspy modules import  #####
from obspy import read


#####  seisglitch modules import  #####
from seisglitch import detect, plot, remove, util



### PARSING ARGUEMENTS
parser = argparse.ArgumentParser(
    description = """
                  SEISglitch Toolbox
                  """)

parser.add_argument('mode', 
        metavar = 'MODE',
        type    = str,
        help    = """
                  Choose which SEISglitch mode to run. 
                  Choices: 'detect', 'plot', 'remove', 'download', 'decimate', 'merge', or 'time'.
                  """,
        choices = ['detect', 'plot', 'remove', 'download', 'decimate', 'merge', 'time'])

parser.add_argument('config_file', 
        metavar = 'CONFIG_FILE',
        type    = str,
        help    = """
                  Choose config file for specific parameters.
                  """)

args   = vars( parser.parse_args() )
mode   = args['mode'].lower()
config = args['config_file']



### EXECUTE ACCORDING TO SPECIFIED PARAMETERS
params         = util.read_config(config)
waveform_files = params['waveform_files']


if mode=='detect':

    detect_params = params['detect']['detector']
    detect.detect( *waveform_files, **detect_params )


elif mode=='plot':
    
    inventory_file        = params['detect']['detector']['inventory_file']
    glitch_length         = params['detect']['detector']['glitch_length']

    glitch_detector_files = params['plot']['glitch_detector_files']
    plot_params           = params['plot']['plotter']

    plot.plot_glitch_detector(    *glitch_detector_files, **plot_params, **params['plot']['glitch_detector_plot'], waveform_files=waveform_files)
    plot.plot_glitch_overview(    *glitch_detector_files, **plot_params, **params['plot']['glitch_overview_plot'], waveform_files=waveform_files, glitch_length=glitch_length )
    plot.glitch_SOLoverLMST_plot( *glitch_detector_files, **plot_params, **params['plot']['glitch_SOLoverLMST_plot'])
    plot.plot_glitch_gutenberg(   *glitch_detector_files, **plot_params, **params['plot']['glitch_gutenberg_plot'] )
    plot.plot_glitch_ppol(                                **plot_params, **params['plot']['glitch_ppol_plot'],     waveform_files=waveform_files, inventory_file=inventory_file, glitch_length=glitch_length)

    if plot_params['show']:
      plt.show()
    plt.close()


elif mode=='remove':

    inventory_file        = params['detect']['detector']['inventory_file']
    glitch_length         = params['detect']['detector']['glitch_length']

    glitch_detector_files = params['remove']['glitch_detector_files']
    remove_params         = params['remove']['remover']

    remove.remove( *glitch_detector_files, waveform_files=waveform_files, inventory_file=inventory_file, glitch_length=glitch_length, **remove_params )


elif mode=='download':

    kwargs = params['download']
    util.download_data(**kwargs)


elif mode=='decimate':

    waveform_files        = params['decimate']['waveform_files']
    decimation_factors    = params['decimate']['decimation_factors']
    final_network         = params['decimate']['final_network']
    final_station         = params['decimate']['final_station']
    final_location        = params['decimate']['final_location']
    final_bandcode        = params['decimate']['final_bandcode']

    for file in waveform_files:

        stream = read(file)
        print()
        print(u'File: %s' % file)
        print(u'Found %s trace. Handling ..' % len(stream))

        for trace in stream.select(channel='?[LMH]?'):
            for decimation_factor in decimation_factors:
                util.decimate_SEIS(trace, decimation_factor, verbose=False)

            if final_network:
                trace.stats.network = final_network

            if final_station:
                trace.stats.station = final_station

            if final_location:
                trace.stats.location = final_location

            if final_bandcode:
                trace.stats.channel = final_bandcode + trace.stats.channel[1:]

        file_path  = os.path.dirname(file)
        file_name  = os.path.basename(file)
        outfile    = os.path.join( file_path, 'decimated_' + file_name)
        stream.write(outfile)

        print(u'File out: %s' % outfile)
        print()

    print(u'Finished.')


elif mode=='merge':

    glitch_detector_files = params['merge']['glitch_detector_files']
    if not glitch_detector_files:
        waveform_files        = params['waveform_files']        
        glitch_detector_files = [os.path.join( os.path.dirname(file), 'glitches_' + '.'.join(os.path.basename(file).split('.')[:-1]) + '.txt' ) for file in waveform_files]

    outfile               = params['merge']['outfile']
    starttime_sort        = params['merge']['starttime_sort']
    multiples_out         = params['merge']['multiples_out']

    util.merge_glitch_detector_files(glitch_detector_files, outfile, starttime_sort=starttime_sort, multiples_out=multiples_out)


elif mode=='time':

    file    = params['time']['file']
    convert = params['time']['convert']
    print()

    if convert:
        time = None

        try:                # attempt to read as UTC
            time = util.marstime(UTC=str(convert))
        except:
            pass

        if time is None:    # UTC didn't work, attempt as LMST
            try:
                time = util.marstime(UTC=str(convert))
            except:
                print(u'Could not convert time: Please follow the following formats (h:m:s must not be fully stated):')
                print(u"For UTC:  'XXXX-XX-XXTxx:xx:xx.x'")
                print(u"For LMST: 'XXXMxx:xx:xx.x'")
                sys.exit()
        print(time)

    elif file:
        file_read = np.loadtxt(file, dtype=str)

        try:
            times = file_read[:,0]
        except IndexError:
            times = file_read
        times_converted = []

        for time in times:
            try:
                times_converted.append( util.marstime(UTC=str(time)).LMST_string )
            except:
                try:
                    times_converted.append( util.marstime(LMST=str(time)).UTC_string )
                except:
                    times_converted.append(np.nan)

        file_read = np.c_[ file_read, times_converted ]
        np.savetxt(file, file_read, fmt='%-20s')
        print(u'Finished. Conversions written to new column %s.' % len(file_read[1]))

    else:
        print(u'At least one option must be specified. Nothing done.')


else:
    pass