#!/usr/bin/env python

# Copyright 2019 John-Robert Scholz
#
# This file is part of Seisglitch.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# -*- coding: utf-8 -*-


"""
..
"""


#####  python modules import  #####
import sys
import argparse


#####  seisglitch modules import  #####
from seisglitch import detect, plot
from seisglitch.util import read_config



### PARSING ARGUEMENTS
parser = argparse.ArgumentParser(
    description = """
                  SEISGLITCH PROGRAM
                  """)

parser.add_argument('mode', 
        metavar = 'MODE',
        type    = str,
        help    = """
                  Choose which Seisglitch mode to run. 
                  Choices: 'detect', 'plot', 'remove', or 'evaluate'.
                  """,
        choices = ['detect', 'plot', 'remove', 'evaluate'])

parser.add_argument('config_file', 
        metavar = 'CONFIG_FILE',
        type    = str,
        help    = """
                  Choose config file for specific parameters.
                  """)

args   = vars( parser.parse_args() )
mode   = args['mode'].lower()
config = args['config_file']



### EXECUTE ACCORDING TO SPECIFIED PARAMETERS
params = read_config(config)


if mode=='detect':

    waveform_files = params['detect']['waveform_files']
    detect_params  = params['detect']['detector']

    detect.glitch_detector( *waveform_files, **detect_params )


elif mode=='plot':

    waveform_files        = params['detect']['waveform_files']
    inventory_file        = params['detect']['detector']['inventory_file']
    glitch_detector_files = params['plot']['glitch_detector_files']
    plot_params           = params['plot']['plotter']

    plot.glitch_overview_plot(  *glitch_detector_files, **plot_params['glitch_overview_plot'] )
    plot.glitch_gutenberg_plot( *glitch_detector_files, **plot_params['glitch_gutenberg_plot'] )
    plot.glitch_waveform_plot(  *glitch_detector_files, waveform_files=waveform_files, **plot_params['glitch_waveform_plot'] )
    plot.glitch_XoverBAZ_plot(  *glitch_detector_files, **plot_params['glitch_XoverBAZ_plot'] )
    plot.glitch_align_plot(     *glitch_detector_files, waveform_files=waveform_files, **plot_params['glitch_align_plot'] )
    plot.glitch_ppol_plot(      *glitch_detector_files, waveform_files=waveform_files, inventory_file=inventory_file, **plot_params['glitch_ppol_plot'] )


elif mode=='remove':
    pass


elif mode=='evaluate':
    pass